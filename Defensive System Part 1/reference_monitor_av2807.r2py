"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    #if self.Afn in listfiles():
    #  flag=1

    # make the files and add 'SE' to the readat file...
    if create:
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE',0)
    else:
      if self.Afn in listfiles():
        self.Afile=openfile(self.Afn,True)
        self.Bfile=openfile(self.Bfn, True)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        raise FileNotFoundError


  def writeat(self,data,offset):
    #self.lock = createlock()
    #self.lock.acquire(True)
    # Write the requested data to the B file using the sandbox's writeat call
    #if offset>=0 and offset<len(self.Bfile.readat(None,0)):
    #  self.Bfile.writeat(data, offset)
      #raise RepyArgumentError
      #self.lock.release()
    #else:
      #self.lock.release()
    #self.Bfile.writeat(data,offset)
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    """
    if(offset<0):
      return ""
    elif len(self.Afile.readat(None,0))<0:
      return ""
    elif offset>=len(self.Afile.readat(None,0)):
      return ""
    elif bytes>len(self.Afile.readat(None,0)) and bytes!=None:
      return ""
    elif len(self.Afile.readat(None,0))<offset+len(self.Afile.readat(None,0)) and bytes!=None:
      return ""
    """
    return self.Afile.readat(bytes,offset)

  def close(self):
    """backup_data = self.Afile.readat(None,0)
    data2 = self.Bfile.readat(None,0)
    #backupfile = self.Afn
    self.Afile.close()
    self.Bfile.close()
    if len(self.Bfile.readat(None,0))<0:
      raise RepyArgumentError
    if (data2 is ''):
      raise RepyArgumentError
    elif (data2[0]=='S') and data2[len(self.Bfile.readat(None,0))-1]=='E':
      writer=openfile(self.Afn,True)
      writer.writeat(data2,0)
      writer.close()

    else:
      writer=openfile(self.Bfn, True)
      writer.writeat(backup_data,0)
      writer.close()
      """
    a = self.Afile.readat(None,0)
    b = self.Bfile.readat(None,0)
    self.Afile.close()
    self.Bfile.close()
    #length=len(b)
    if(len(b)<=1):
      raise RepyArgumentError
    if(b is ''):
      raise RepyArgumentError
    elif (b[0] is 'S' and b[len(b)-1] is 'E'):
      c=openfile(self.Afn,True)
      c.writeat(b,0)
      c.close()
    else:
      c=openfile(self.Bfn,True)
      c.writeat(a,0)
      c.close()



def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()